services:
  # Serviço de inicialização para preparar o ambiente
  init:
    image: alpine:latest
    command: >
      sh -c "
        apk add --no-cache openssl &&
        mkdir -p /tmp/config/keys &&
        echo 'Gerando chaves para autenticação...' &&
        openssl genrsa -out /tmp/config/keys/private.pem 2048 &&
        openssl rsa -in /tmp/config/keys/private.pem -pubout -out /tmp/config/keys/public.pem &&
        chmod 600 /tmp/config/keys/private.pem &&
        chmod 644 /tmp/config/keys/public.pem &&
        echo 'Criando arquivo de integrações...' &&
        cat > /tmp/config/integrations.json << 'EOF'
        {
          \"assistants\": {},
          \"callManagers\": [],
          \"channels\": [],
          \"fonos\": {},
          \"providers\": {
            \"api\": {
              \"baseUrl\": \"https://api.fonoster.io/v1\",
              \"type\": \"api\"
            }
          }
        }
        EOF
        &&
        echo 'Configuração concluída!' &&
        cp -r /tmp/config/* /config/ &&
        chmod -R 777 /config &&
        echo 'Arquivos copiados para o volume compartilhado.'
      "
    volumes:
      - ./config:/config
  
  apiserver:
    image: fonoster/apiserver:latest
    restart: unless-stopped
    depends_on:
      - init
      - postgres
    environment:
      - APISERVER_APP_URL
      - APISERVER_ASTERISK_ARI_PROXY_URL
      - APISERVER_ASTERISK_ARI_SECRET
      - APISERVER_ASTERISK_ARI_USERNAME
      - APISERVER_AUTHZ_SERVICE_ENABLED
      - APISERVER_AUTHZ_SERVICE_HOST
      - APISERVER_AUTHZ_SERVICE_METHODS
      - APISERVER_AUTHZ_SERVICE_PORT
      - APISERVER_CLOAK_ENCRYPTION_KEY
      - APISERVER_DATABASE_URL
      - APISERVER_IDENTITY_DATABASE_URL
      - APISERVER_IDENTITY_ISSUER
      - APISERVER_IDENTITY_CONTACT_VERIFICATION_REQUIRED
      - APISERVER_IDENTITY_TWO_FACTOR_AUTHENTICATION_REQUIRED
      - APISERVER_IDENTITY_WORKSPACE_INVITE_EXPIRATION
      - APISERVER_IDENTITY_WORKSPACE_INVITE_FAIL_URL
      - APISERVER_IDENTITY_WORKSPACE_INVITE_URL
      - APISERVER_IDENTITY_RESET_PASSWORD_URL
      - APISERVER_INFLUXDB_INIT_ORG
      - APISERVER_INFLUXDB_INIT_PASSWORD
      - APISERVER_INFLUXDB_INIT_TOKEN
      - APISERVER_INFLUXDB_INIT_USERNAME
      - APISERVER_INFLUXDB_URL
      - APISERVER_LOGS_FORMAT
      - APISERVER_LOGS_LEVEL
      - APISERVER_LOGS_TRANSPORT
      - APISERVER_NATS_URL
      - APISERVER_OWNER_EMAIL
      - APISERVER_OWNER_NAME
      - APISERVER_OWNER_PASSWORD
      - APISERVER_SMTP_AUTH_PASS
      - APISERVER_SMTP_AUTH_USER
      - APISERVER_SMTP_HOST
      - APISERVER_SMTP_PORT
      - APISERVER_SMTP_SECURE
      - APISERVER_SMTP_SENDER
      - APISERVER_TWILIO_ACCOUNT_SID
      - APISERVER_TWILIO_AUTH_TOKEN
      - APISERVER_TWILIO_PHONE_NUMBER
    ports:
      - 50051:50051
    volumes:
      - ./config/keys:/opt/fonoster/keys
      - ./config/integrations.json:/opt/fonoster/integrations.json:ro

  autopilot:
    image: fonoster/autopilot:latest
    restart: unless-stopped
    depends_on:
      - apiserver
    ports:
      - 50061:50061
    environment:
      - AUTOPILOT_AWS_S3_ACCESS_KEY_ID
      - AUTOPILOT_AWS_S3_ENDPOINT
      - AUTOPILOT_AWS_S3_REGION
      - AUTOPILOT_AWS_S3_SECRET_ACCESS_KEY
      - AUTOPILOT_CONVERSATION_PROVIDER
      - AUTOPILOT_KNOWLEDGE_BASE_ENABLED
      - AUTOPILOT_LOGS_FORMAT
      - AUTOPILOT_LOGS_LEVEL
      - AUTOPILOT_LOGS_TRANSPORT
      - AUTOPILOT_OPENAI_API_KEY
      - AUTOPILOT_UNSTRUCTURED_API_KEY
      - AUTOPILOT_UNSTRUCTURED_API_URL
    volumes:
      - ./config/integrations.json:/opt/fonoster/integrations.json:ro

  routr:
    image: fonoster/routr-one:latest
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      DATABASE_URL: ${ROUTR_DATABASE_URL}
      EXTERNAL_ADDRS: ${ROUTR_EXTERNAL_ADDRS}
      LOGS_FORMAT: ${ROUTR_LOGS_FORMAT}
      LOGS_LEVEL: ${ROUTR_LOGS_LEVEL}
      LOGS_TRANSPORT: ${ROUTR_LOGS_TRANSPORT}
      NATS_PUBLISHER_ENABLED: true
      NATS_PUBLISHER_URL: ${ROUTR_NATS_PUBLISHER_URL}
      RTPENGINE_HOST: ${ROUTR_RTPENGINE_HOST}
      START_INTERNAL_DB: "false"
    ports:
      - 51907:51907
      - 51908:51908
      - 5060:5060/udp
      - 5060-5063:5060-5063

  rtpengine:
    image: fonoster/rtpengine:latest
    restart: unless-stopped
    platform: linux/x86_64
    ports: 
      - 10000-10100:10000-10100/udp
      - 8081:8080
    environment:
      PORT_MAX: ${RTPENGINE_PORT_MAX}
      PORT_MIN: ${RTPENGINE_PORT_MIN}
      PUBLIC_IP: ${RTPENGINE_PUBLIC_IP}

  asterisk:
    image: fonoster/asterisk:latest
    restart: unless-stopped
    depends_on:
      - routr
    environment:
      ARI_PROXY_URL: ${ASTERISK_ARI_PROXY_URL}
      ARI_SECRET: ${ASTERISK_ARI_SECRET}
      ARI_USERNAME: ${ASTERISK_ARI_USERNAME}
      CODECS: ${ASTERISK_CODECS}
      DTMF_MODE: ${ASTERISK_DTMF_MODE}
      RTP_PORT_END: ${ASTERISK_RTP_PORT_END}
      RTP_PORT_START: ${ASTERISK_RTP_PORT_START}
      SIPPROXY_HOST: ${ASTERISK_SIPPROXY_HOST}
      SIPPROXY_PORT: ${ASTERISK_SIPPROXY_PORT}
      SIPPROXY_SECRET: ${ASTERISK_SIPPROXY_SECRET}
      SIPPROXY_USERNAME: ${ASTERISK_SIPPROXY_USERNAME}
    ports:
      - 6060:6060
      - 8088:8088

  postgres:
    image: postgres:16.2-alpine
    restart: unless-stopped
    environment:
      PGTZ: UTC
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      TZ: UTC
    ports:
      - 5432:5432
    volumes:
      - db:/var/lib/postgresql/data

  influxdb:
    image: influxdb:2
    restart: unless-stopped
    ports:
      - 8086:8086
    environment:
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_INIT_TOKEN}
      DOCKER_INFLUXDB_INIT_BUCKET: calls
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_INIT_ORG}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_INIT_PASSWORD}
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_INIT_USERNAME}
    volumes:
      - influxdb:/var/lib/influxdb2

  nats:
    image: nats:latest
    restart: unless-stopped
    ports:
      - 4222:4222

  envoy:
    image: envoyproxy/envoy:v1.31.0
    restart: unless-stopped
    depends_on:
      - apiserver
    volumes:
      - ./config:/etc/config
    command: >
      sh -c "echo '# Envoy configuration without tls for development and testing.
      # Do not use this configuration in production. Please check the docs for examples using tls.
      static_resources:
        listeners:
          - name: listener_http
            address:
              socket_address: { address: 0.0.0.0, port_value: 8449 }
            filter_chains:
              - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    codec_type: auto
                    stat_prefix: ingress_http
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: local_service
                          domains: [\"*\"]
                          routes:
                            - match: { prefix: \"/api\" }
                              route:
                                cluster: apiserver-cluster-http
                                timeout: 0s                    
                            - match: { prefix: \"/\" }
                              route:
                                cluster: apiserver-cluster
                                timeout: 0s
                                max_stream_duration:
                                  grpc_timeout_header_max: 0s
                          cors:
                            allow_origin_string_match:
                              - prefix: \"*\"
                            allow_methods: GET, PUT, DELETE, POST, OPTIONS
                            allow_headers: token,accesskeyid,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                            max_age: \"1728000\"
                            expose_headers: grpc-status,grpc-message
                    http_filters:
                      - name: envoy.filters.http.grpc_web
                        typed_config:
                          \"@type\": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                      - name: envoy.filters.http.cors
                        typed_config:
                          \"@type\": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                      - name: envoy.filters.http.router
                        typed_config:
                          \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      
        clusters:
          - name: apiserver-cluster
            type: logical_dns
            connect_timeout: 20s
            http2_protocol_options: {}
            lb_policy: round_robin
            load_assignment:
              cluster_name: apiserver-cluster
              endpoints:
                - lb_endpoints:
                    - endpoint:
                        address:
                          socket_address:
                            address: apiserver
                            port_value: 50051
          - name: apiserver-cluster-http
            type: logical_dns
            connect_timeout: 20s
            lb_policy: round_robin
            load_assignment:
              cluster_name: apiserver-cluster-http
              endpoints:
                - lb_endpoints:
                    - endpoint:
                        address:
                          socket_address:
                            address: apiserver
                            port_value: 9876' > /etc/envoy/envoy.yaml && 
        /usr/local/bin/envoy -c /etc/envoy/envoy.yaml"
    ports:
      - 8449:8449

  webui:
    image: fonoster/webui:latest
    restart: unless-stopped
    depends_on:
      - envoy
    environment:
      - REACT_APP_API_URL=http://103.199.185.165:8449
    ports:
      - 8282:80

  adminer:
    image: adminer:latest
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - 8283:8080

volumes:
  db:
  influxdb:
  fonoster-keys:  # Volume dedicado para armazenar as chaves 